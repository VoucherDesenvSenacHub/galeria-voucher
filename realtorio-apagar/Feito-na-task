Resumo da Task de Login e Controle de Acesso
1. Criação da classe de conexão com o banco (Database.php)
Método conectar() para abrir conexão PDO com MySQL.

Tratamento de exceção para erro de conexão, retornando erro 400 com JSON ou saída customizada.

2. Implementação da lógica de login
Recebe email e senha via $_POST.

Usa Database::conectar() para obter conexão PDO.

Usa UsuarioModel para validar credenciais no banco.

Se válido:

Armazena dados do usuário em $_SESSION['usuario'].

Redireciona para página adequada conforme perfil (adm ou professor → home.php, outros → pages/home.php).

Se inválido:

Define mensagem de erro em $_SESSION['erro_login'].

Redireciona para página de login.

3. Controle de acesso nas páginas protegidas (ADM)
Criado arquivo auth.php para controle centralizado.

auth.php contém:

session_start()

Verificação se usuário está logado (isset($_SESSION['usuario'])).

Verificação se o perfil está entre os permitidos (adm, professor).

Caso falhe alguma verificação, exibe alert JS e redireciona para login.

Inclusão do auth.php no topo das páginas administrativas para proteger acesso.

4. Uso do session_start()
Centralizado dentro do auth.php.

Evitar múltiplas chamadas nas páginas que incluem auth.php.

5. Criação de página de erro alternativa (opcional)
Sugestão inicial de página sem-permissao.php para informar acesso negado (mas optou por alert JS + redirect para simplicidade).

6. Outros ajustes
Organização do código HTML + PHP com variáveis para abas ativas.

Ajuste no JavaScript para pesquisa dinâmica na tabela.

Observação sobre evitar repetição do código de autenticação usando o arquivo auth.php.